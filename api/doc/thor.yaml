openapi: 3.0.1
info:
  title: Thorest
  description: |
    RESTful API to access VeChain Thor Network

    [Project Home](https://github.com/vechain/thor)
  license:
    name: LGPL 3.0
    url: 'https://www.gnu.org/licenses/lgpl-3.0.en.html'
  version: 1.0.1

servers:
  - url: '/'
    description: local thor node
tags:
  - name: Accounts
    description: Access to account objects
  - name: Transactions
    description: Access to transactions
  - name: Blocks
    description: Access to blocks
  - name: Logs
    description: Access to event & transfer logs
  - name: Node
    description: Access to node status info
paths:
  /accounts/{address}:
    parameters:
      - $ref: '#/components/parameters/AddressInPath'
      - $ref: '#/components/parameters/RevisionInQuery'
    get:
      tags:
        - Accounts
      summary: Retrieve account detail
      description: |
        includes `balance`, `energy` and `hasCode`, by account `address`. An account with `hasCode` be *true* is a contract.

        Historical account detail can be queried by specifying `revision` query string.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
    post:
      tags:
        - Accounts
      summary: Call account code
      description: |
        to simulate contract method call, without sending transaction to block chain.
        
        It's useful to estimate gas usage and execution result of a clause.
      requestBody:
        description: arguments and environment
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CallData'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CallResult'
  /accounts:
    post:
      parameters:
        - $ref: '#/components/parameters/RevisionInQuery'
      tags:
        - Accounts
      summary: Call bytecodes
      description: |
        to simulate contract deployment without sending transaction to block chain.
        
        It's useful to estimate gas usage and contract deployment result of a clause.
        
        ### TIPS:
          - `data` in request body is the bytecodes of a contract
          - `data` in response body is the runtime bytecodes assigned to account which the contract to be deployed
      requestBody:
        description: arguments and environment
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CallData'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CallResult'
  /accounts/{address}/code:
    parameters:
      - $ref: '#/components/parameters/AddressInPath'
      - $ref: '#/components/parameters/RevisionInQuery'
    get:
      tags:
        - Accounts
      summary: Retrieve account code
      description: |
        if any. Here the code is runtime bytecodes.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                properties:
                  code:
                    type: string
                example:
                  code: >-
                    0x6060604052600080fd00a165627a7a72305820c23d3ae2dc86ad130561a2829d87c7cb8435365492bd1548eb7e7fc0f3632be90029
  /accounts/{address}/storage/{key}:
    parameters:
      - $ref: '#/components/parameters/AddressInPath'
      - $ref: '#/components/parameters/StorageKeyInPath'
      - $ref: '#/components/parameters/RevisionInQuery'
    get:
      tags:
        - Accounts
      summary: Retrieve account storage value
      description: |
        for given key.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                properties:
                  value:
                    type: string
                example:
                  value: >-
                    0x0000000000000000000000000000000000000000000000000000000000000001

  /transactions/{id}:
    parameters:
      - $ref: '#/components/parameters/TxIDInPath'
      - $ref: '#/components/parameters/RawInQuery'
      - $ref: '#/components/parameters/HeadInQuery'
    get:
      tags:
        - Transactions
      summary: Retrieve transaction
      description: |
        by ID.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                oneOf:
                  - $ref: '#/components/schemas/TxWithMeta'
                  - $ref: '#/components/schemas/RawTxWithMeta'
                example:
                  id: '0x4de71f2d588aa8a1ea00fe8312d92966da424d9939a511fc0be81e65fad52af8'
                  chainTag: 1
                  blockRef: '0x00000001511fc0be'
                  expiration: 30
                  clauses: []
                  gasPriceCoef: 128
                  gas: 21000
                  origin: '0x7567d83b7b8d80addcb281a71d54fc7b3364ffed'
                  nonce: '0xd92966da424d9939'
                  dependsOn: 'null'
                  size: 180
                  meta:
                    blockID: '0x00000001c458949985a6d86b7139690b8811dd3b4647c02d4f41cdefb7d32327'
                    blockNumber: 1
                    blockTimestamp: 1523156271
  /transactions/{id}/receipt:
    parameters:
      - $ref: '#/components/parameters/TxIDInPath'
      - $ref: '#/components/parameters/HeadInQuery'
    get:
      tags:
        - Transactions
      summary: Retrieve transaction receipt
      description: |
        by ID.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Receipt'
  /transactions:
    post:
      tags:
        - Transactions
      summary: Send transaction
      description: |
        in raw or structured format. If no signature in structured format,
        `signingHash` is returned in response body.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/RawTx'
                - $ref: '#/components/schemas/SignedTx'
                - $ref: '#/components/schemas/TxBody'
              example:
                raw: >-
                  0xf86981ba800adad994000000000000000000000000000000000000746f82271080018252088001c0b8414792c9439594098323900e6470742cd877ec9f9906bca05510e421f3b013ed221324e77ca10d3466b32b1800c72e12719b213f1d4c370305399dd27af962626400
              
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      id:
                        type: string
                  - type: object
                    properties:
                      signingHash:
                        type: string
                example:
                  id: >-
                    0x4de71f2d588aa8a1ea00fe8312d92966da424d9939a511fc0be81e65fad52af8

  /blocks/{revision}:
    parameters:
      - $ref: '#/components/parameters/RevisionInPath'
    get:
      tags:
        - Blocks
      summary: Retrieve block
      description: |
        by ID or number, or 'best' for latest block.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Block'

  /logs/events:
    post:
      tags:
        - Logs
      summary: Filter event logs
      description: |
        Event logs are produced by OP_LOG in EVM. e.g
        ```
        curl -X POST "http://localhost:8669/logs/events?order=asc&address=0x0000000000000000000000000000456e65726779" -H "accept: application/json" -H "Content-Type: application/json" -d "{\"range\":{\"unit\":\"block\",\"from\":20000,\"to\":30000},\"options\":{\"offset\":0,\"limit\":10},\"topicSets\":[{\"topic0\":\"0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\"}]}"
        
        the above refers to querying the logs which are produced by `0x0000000000000000000000000000456e65726779` from block 20000 to block 30000ï¼Œthe limit is 10. 
        ```
      parameters:
        - $ref: '#/components/parameters/FilterOrderInQuery'
        - $ref: '#/components/parameters/FilterAddressInQuery'
      requestBody:
        description: event filter criteria
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventFilter'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FilteredEvent'
  /logs/transfers:
    post:
      tags:
        - Logs
      summary: Filter transfer logs
      description: |
        Transfer logs are recorded on VET transferring. e.g.
        ```
        curl -X POST "http://localhost:8669/logs/transfers?order=asc" -H "accept: application/json" -H "Content-Type: application/json" -d "{\"range\":{\"unit\":\"block\",\"from\":20000,\"to\":300000},\"options\":{\"offset\":0,\"limit\":10},\"AddressSets\":[{\"txOrigin\":\"0x7567d83b7b8d80addcb281a71d54fc7b3364ffed\"}]}"
        
        the above refers to querying the transfer logs which are sent by `0x7567d83b7b8d80addcb281a71d54fc7b3364ffed` from block 20000 to block 30000 and the limit is 10.
        ```
      parameters:
        - $ref: '#/components/parameters/FilterOrderInQuery'
      requestBody:
        description: transfer log filter criteria
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransferFilter'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FilteredTransfer'
  /events:
    post:
      deprecated: true
      tags:
        - Logs
      summary: Filter event logs
      parameters:
        - $ref: '#/components/parameters/FilterOrderInQuery'
        - $ref: '#/components/parameters/FilterAddressInQuery'
      requestBody:
        description: event filter criteria
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventFilter'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FilteredEvent'
  /transfers:
    post:
      deprecated: true
      tags:
        - Logs
      summary: Filter transfer logs
      parameters:
        - $ref: '#/components/parameters/FilterOrderInQuery'
      requestBody:
        description: transfer log filter criteria
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransferFilter'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FilteredTransfer'

  /node/network/peers:
    get:
      tags:
        - Node
      summary: Retrieve connected peers
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/PeerStats'

components:
  schemas:
    Account:
      properties:
        balance:
          type: string
          description: balance in unit WEI, presented with hex string
        energy:
          type: string
          description: energy in uint WEI, presented with hex string
        hasCode:
          type: boolean
          description: whether the account has code
      example:
        balance: '0xde0b6b3a7640000'
        energy: '0xde0b6b3a7640000'
        hasCode: false
    TxMeta:
      description: transaction meta info
      properties:
        blockID:
          type: string
          description: block identifier (bytes32)
        blockNumber:
          type: integer
          format: uint32
          description: block number (height)
        blockTimestamp:
          type: integer
          format: uint64
          description: block unix timestamp
    LogMeta:
      description: event or transfer log meta info
      properties:
        blockID:
          type: string
          description: block identifier (bytes32)
        blockNumber:
          type: integer
          format: uint32
          description: block number (height)
        blockTimestamp:
          type: integer
          format: uint64
          description: block unix timestamp
        txID:
          type: string
          description: transaction identifier
        txOrigin:
          type: string
          description: transaction origin (signer)
    Block:
      properties:
        number:
          type: integer
          format: uint32
          description: block number (height)
        id:
          type: string
          format: bytes32
          description: block identifier
        size:
          type: integer
          format: uint32
          description: RLP encoded block size in bytes
        parentID:
          type: string
          format: bytes32
          description: parent block ID
        timestamp:
          type: integer
          format: uint64
          description: block unix timestamp
        gasLimit:
          type: integer
          format: uint64
          description: block gas limit (max allowed accumulative gas usage of transactions)
        beneficiary:
          type: string
          format: bytes32
          description: address of account to receive block reward
        gasUsed:
          type: integer
          format: uint64
          description: accumulative gas usage of transactions
        totalScore:
          type: integer
          format: uint64
          description: sum of all ancestral blocks' score
        txsRoot:
          type: string
          format: bytes32
          description: root hash of transactions in the block 
        stateRoot:
          type: string
          format: bytes32
          description: root hash of accounts state
        receiptsRoot:
          type: string
          format: bytes32
          description: root hash of transaction receipts
        signer:
          type: string
          format: bytes20
          description: the one who signed this block
        isTrunk:
          type: boolean
          description: whether block is trunk
        transactions:
          type: array
          description: transactions IDs
          items:
            type: string
            format: bytes32
            description: transaction ID
      example:
        number: 1
        id: '0x00000001c458949985a6d86b7139690b8811dd3b4647c02d4f41cdefb7d32327'
        size: 238
        parentID: '0x00000002a0c772179aa43cb6bb55d0b31369f9e92014c88a50b2cb99f9be1c5d'
        timestamp: 1523156271
        gasLimit: 10000000
        beneficiary: '0x7567d83b7b8d80addcb281a71d54fc7b3364ffed'
        gasUsed: 0
        totalScore: 101
        txsRoot: '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347'
        stateRoot: '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347'
        receiptsRoot: '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347'
        signer: '0x7567d83b7b8d80addcb281a71d54fc7b3364ffed'
        isTrunk: true
        transactions:
          - '0x4de71f2d588aa8a1ea00fe8312d92966da424d9939a511fc0be81e65fad52af8'
        
    Clause:
      properties:
        to:
          type: string
          description: 'recipient of clause, null for contract deployment (bytes32)'
        value:
          type: string
          description: hex form of token to be transferred
        data:
          type: string
          description: input data (bytes)
      example:
        to: '0x7567d83b7b8d80addcb281a71d54fc7b3364ffed'
        value: '0x10'
        data: null

    TxBody:
      properties:
        chainTag:
          type: integer
          format: uint8
          description: last byte of genesis block ID
        blockRef:
          type: string
          description: 8 bytes prefix of some block ID
        expiration:
          type: integer
          format: uint32
          description: 'expiration relative to blockRef, in unit block'
        clauses:
          type: array
          items:
            $ref: '#/components/schemas/Clause'
        gasPriceCoef:
          type: integer
          format: uint8
          description: coefficient used to calculate the final gas price
        gas:
          type: integer
          format: uint64
          description: max amount of gas can be consumed to execute this transaction        
        dependsOn:
          type: string
          format: bytes32
          description: >-
            ID of the transaction on which the current transaction depends on. can be null.
        nonce:
          type: string
    
    SignedTx:
      allOf:
        - $ref: '#/components/schemas/TxBody'
        - type: object
          properties:
            signature:
              type: string
              description: signature hex string

    TxWithMeta:
      allOf:
        - $ref: '#/components/schemas/TxBody'
        - type: object
          properties:
            id:
              type: string
              description: identifier of the transaction            
            origin:
              type: string
              description: the one who signed the transaction
            size:
              type: integer
              format: uint32
              description: byte size of the transaction that is RLP encoded
            meta:
              $ref: '#/components/schemas/TxMeta'
      example:
        id: '0x4de71f2d588aa8a1ea00fe8312d92966da424d9939a511fc0be81e65fad52af8'
        chainTag: 1
        blockRef: '0x00000001511fc0be'
        expiration: 30
        clauses: []
        gasPriceCoef: 128
        gas: 21000
        origin: '0x7567d83b7b8d80addcb281a71d54fc7b3364ffed'
        nonce: '0xd92966da424d9939'
        dependsOn: 'null'
        size: 180
        meta:
          blockID: '0x00000001c458949985a6d86b7139690b8811dd3b4647c02d4f41cdefb7d32327'
          blockNumber: 1
          blockTimestamp: 1523156271
    
    RawTx:
      properties:
        raw:
          type: string
          description: hex form of encoded transaction
    
    RawTxWithMeta:
      properties:
        raw:
          type: string
          description: hex form of encoded transaction
        meta:
          $ref: '#/components/schemas/TxMeta'
      example:
        raw: >-
          0xf86981ba800adad994000000000000000000000000000000000000746f82271080018252088001c0b8414792c9439594098323900e6470742cd877ec9f9906bca05510e421f3b013ed221324e77ca10d3466b32b1800c72e12719b213f1d4c370305399dd27af962626400
        meta:
          blockID: '0x00000001c458949985a6d86b7139690b8811dd3b4647c02d4f41cdefb7d32327'
          blockNumber: 1
          blockTimestamp: 1523156271

    Event:
      properties:
        address:
          type: string
          description: the address of contract which produces the event (bytes20)
        topics:
          type: array
          items:
            type: string
        data:
          type: string
      example:
        address: '0x7567d83b7b8d80addcb281a71d54fc7b3364ffed'
        topics:
          - '0x4de71f2d588aa8a1ea00fe8312d92966da424d9939a511fc0be81e65fad52af8'
        data: '0xddff'
    Transfer:
      properties:
        sender:
          type: string
          description: address that sends tokens
        recipient:
          type: string
          description: address that receives tokens
        amount:
          type: string
          description: amount of tokens
      example:
        sender: '0x7567d83b7b8d80addcb281a71d54fc7b3364ffed'
        recipient: '0x733b7269443c70de16bbf9b0615307884bcc5636'
        amount: '0xde0b6b3a7640000'
    Receipt:
      properties:
        gasUsed:
          type: integer
          format: uint64
        gasPayer:
          type: string
          description: address of account who paid used gas
        paid:
          type: string
          description: hex form of amount of paid energy
        reward:
          type: string
          description: hex form of amount of reward
        reverted:
          type: boolean
          description: true means the transaction was reverted
        outputs:
          type: array
          items:
            properties:
              contractAddress:
                type: string
                description: >-
                  deployed contract address, if the corresponding clause is a
                  contract deployment clause
              events:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
              transfers:
                type: array
                items:
                  $ref: '#/components/schemas/Transfer'
        meta:
          $ref: '#/components/schemas/LogMeta'
      example:
        gasUsed: 21000
        gasPayer: '0x7567d83b7b8d80addcb281a71d54fc7b3364ffed'
        paid: '0x723daf2'
        reward: '0x723daf2'
        reverted: false
        outputs:
          - 'contractAddress:''0x7567d83b7b8d80addcb281a71d54fc7b3364ffed''': null
            events:
              - address: '0x7567d83b7b8d80addcb281a71d54fc7b3364ffed'
                topics: 
                  - '0x4de71f2d588aa8a1ea00fe8312d92966da424d9939a511fc0be81e65fad52af8'
                data: 
                  '0x4de71f2d588aa8a1ea00fe8312d92966da424d9939a511fc0be81e65fad52af8'
            transfers:
              - sender: '0x7567d83b7b8d80addcb281a71d54fc7b3364ffed'
                recipient: '0x7567d83b7b8d80addcb281a71d54fc7b3364ffed'
                amount: '0x123f'
        meta:
          blockID: '0x00000001c458949985a6d86b7139690b8811dd3b4647c02d4f41cdefb7d32327'
          blockNumber: 1
          blockTimestamp: 1523156271
          txID: '0x4de71f2d588aa8a1ea00fe8312d92966da424d9939a511fc0be81e65fad52af8'
          txOrigin: '0x7567d83b7b8d80addcb281a71d54fc7b3364ffed'
    CallData:
      properties:
        value:
          type: string
          description: amount of token to be transferred
        data:
          type: string
          description: input data for contract call
        gas:
          type: integer
          format: uint64
          description: 'optional, to specify max gas for execution'
        gasPrice:
          type: string
          description: 'optional, absolute gas price'
        caller:
          type: string
          description: 'optional, to specify the caller'
      example:
        value: '0x0'
        data: '0x5665436861696e2054686f72'
    CallResult:
      properties:
        data:
          type: string
          description: the output data
        events:
          type: array
          items:
            $ref: '#/components/schemas/Event'
        transfers:
          type: array
          items:
            $ref: '#/components/schemas/Transfer'
        gasUsed:
          type: integer
          format: uint64
          description: gas used during execution
        reverted:
          type: boolean
        vmError:
          type: string
      example:
        data: '0x103556a73c10e38ffe2fc4aa50fc9d46ad0148f07e26417e117bd1ece9d948b5'
        events: []
        transfers: []
        gasUsed: 21000
        reverted: false
        vmError: ''
    Options:
      properties:
        offset:
          type: integer
        limit:
          type: integer
      description: |
        pass these parameters if you need filtered results paged. e.g. 
        ```
        {
          options: {
            offset: 0,
            limit:10   
          }
        }
        ```
        the above refers that page offset is 0,and the page size is 10.
        pass options `nil` if you don't need to demand paging.
    Range:
      properties:
        unit:
          type: string
          enum:
            - block
            - time
          description: |
            block means `BlockNumber`,time means `BlockTimestamp` using UTC timestamp, default using block
        from:
          type: integer
          format: uint64
          description: |
            `fromBlockNumber` or `fromBlockTimestamp`
        to:
          type: integer
          format: uint64
          description: |
            `toBlockNumber` or `toBlockTimestamp`
      description: |
        the scope is [from,to].e.g.
        ```
        {
          range: {
            from:10,
            to:1000
          }
        }
        ```
        the above refers to requesting the results from block 10 to block 1000,
        pass this range `nil` if you want to filter results in all scope
      example:
        unit: block
        from: 100
        to: 1000
    TopicSet:
      properties:
        topic0:
          type: string
        topic1:
          type: string
        topic2:
          type: string
        topic3:
          type: string
        topic4:
          type: string
      description: |
        An object of values which must each appear in the log entries. if you want to leave the topic out use null or ignore the properties, e.g. 
        ```
        {
          topicSet: {
            topic1: '0x103556a73c10e38ffe2fc4aa50fc9d46ad0148f07e26417e117bd1ece9d948b5',
            topic2: 'null'   
          }
        }
        ```
        in this way. topic0,topic2,topic3 and topic4 are all null
      example:
        topic1: '0x103556a73c10e38ffe2fc4aa50fc9d46ad0148f07e26417e117bd1ece9d948b5'
    EventFilter:
      properties:
        range:
          $ref: '#/components/schemas/Range'
        options:
          $ref: '#/components/schemas/Options'
        topicSets:
          type: array
          items:
            $ref: '#/components/schemas/TopicSet'
    FilteredEvent:
      properties:
        topics:
          type: array
          items:
            type: string
        data:
          type: string
        meta:
          $ref: '#/components/schemas/LogMeta'
      example:
        topics:
          - '0x103556a73c10e38ffe2fc4aa50fc9d46ad0148f07e26417e117bd1ece9d948b5'
        data: '0x4de71f2d588aa8a1ea00fe8312d92966da424d9939a511fc0be81e65fad52af8'
        meta:
          blockID: '0x00000001c458949985a6d86b7139690b8811dd3b4647c02d4f41cdefb7d32327'
          blockNumber: 1
          blockTimestamp: 1523156271
          txID: '0x4de71f2d588aa8a1ea00fe8312d92966da424d9939a511fc0be81e65fad52af8'
          txOrigin: '0x7567d83b7b8d80addcb281a71d54fc7b3364ffed'
    AddressSet:
      properties:
        txOrigin:
          type: string
        sender:
          type: string
        recipient:
          type: string
      example:
        txOrigin: '0x7567d83b7b8d80addcb281a71d54fc7b3364ffed'
        sender: '0x7567d83b7b8d80addcb281a71d54fc7b3364ffed'
        recipient: '0x7567d83b7b8d80addcb281a71d54fc7b3364ffed'
    TransferFilter:
      properties:
        range:
          $ref: '#/components/schemas/Range'
        options:
          $ref: '#/components/schemas/Options'
        AddressSets:
          type: array
          items:
            $ref: '#/components/schemas/AddressSet'
    FilteredTransfer:
      properties:
        sender:
          type: string
        recipient:
          type: string
        amount:
          type: string
        meta:
          $ref: '#/components/schemas/LogMeta'
      example:
        sender: '0x7567d83b7b8d80addcb281a71d54fc7b3364ffed'
        recipient: '0x7567d83b7b8d80addcb281a71d54fc7b3364ffed'
        amount: '0x9fad'
        meta:
          blockID: '0x00000001c458949985a6d86b7139690b8811dd3b4647c02d4f41cdefb7d32327'
          blockNumber: 1
          blockTimestamp: 1523156271
          txID: '0x4de71f2d588aa8a1ea00fe8312d92966da424d9939a511fc0be81e65fad52af8'
          txOrigin: '0x7567d83b7b8d80addcb281a71d54fc7b3364ffed'
    PeerStats:
      properties:
        name:
          type: string
        bestBlockID:
          type: string
        totalScore:
          type: integer
        peerID:
          type: string
        netAddr:
          type: string
        inbound:
          type: boolean
        duration:
          type: integer
      example: 
        name: 'thor/v1.0.0-6680b98-dev/linux/go1.10.3'
        bestBlockID: '0x000087b3a4d4cdf1cc52d56b9704f4c18f020e1b48dbbf4a23d1ee4f1fa5ff94'
        totalScore: 68497
        peerID: '50e122a505ee55b84331068acfd857e37ad58f463a0fab9aaff2c1e4b2e2d22ae71dc14fdaf6eead74bd3f60594644aa35c588f9ca6be3341e2ce18ddc413321'
        netAddr: '128.1.39.120:11235'
        inbound: false
        duration: 28
  parameters:
    AddressInPath:
      name: address
      in: path
      description: address of account
      required: true
      schema:
        type: string
        format: bytes20
      example: '0x7567d83b7b8d80addcb281a71d54fc7b3364ffed'
    RawInQuery:
      name: raw
      in: query
      description: whether retrieve a raw transaction.
      required: false
      schema:
        type: boolean
    RevisionInQuery:
      name: revision
      in: query
      description: can be block number or ID. best block is assumed if omitted.
      schema:
        type: string
    RevisionInPath:
      name: revision
      in: path
      description: |
        block ID or number, or 'best' stands for latest block
      required: true
      schema:
        type: string
      example: best
    HeadInQuery:
      name: head
      in: query
      description: ID of head block. best block is assumed if omitted
      schema:
        type: string
    StorageKeyInPath:
      in: path
      description: the key(position) to access account storage
      required: true
      name: key
      schema:
        type: string
      example: '0x0000000000000000000000000000000000000000000000000000000000000001'
    FilterAddressInQuery:
      name: address
      in: query
      description: address of account
      required: false
      schema:
        type: string
      example: '0x0000000000000000000000000000456e65726779'
    FilterOrderInQuery:
      name: order
      in: query
      description: order of filters
      required: false
      schema:
        type: string
        enum:
          - asc
          - desc
      example: asc
    TxIDInPath:
      in: path
      description: ID of transaction
      required: true
      name: id
      schema:
        type: string
      example: '0x9bcc6526a76ae560244f698805cc001977246cb92c2b4f1e2b7a204e445409ea'
